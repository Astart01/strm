import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from io import BytesIO


API_KEY = "U531V46ABDTXSHEV"

st.set_page_config(page_title='–§–∏–Ω–∞–Ω—Å—ã –∏ –ß–∞–µ–≤—ã–µ', layout='wide')

st.sidebar.header('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
st.title('üìà –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π Apple (AAPL)')

period_options = {
    '1d': 'TIME_SERIES_INTRADAY',
    '5d': 'TIME_SERIES_DAILY',
    '1mo': 'TIME_SERIES_DAILY',
    '3mo': 'TIME_SERIES_DAILY',
    '6mo': 'TIME_SERIES_DAILY',
    '1y': 'TIME_SERIES_DAILY',
    '2y': 'TIME_SERIES_DAILY',
    '5y': 'TIME_SERIES_DAILY',
    '10y': 'TIME_SERIES_DAILY'
}

period = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', list(period_options.keys()), index=1)


def get_stock_data(symbol="AAPL", period="1d"):
    try:
        function = period_options[period]
        url = f"https://www.alphavantage.co/query?function={function}&symbol={symbol}&apikey={API_KEY}&outputsize=compact"

        response = requests.get(url)
        data = response.json()

        if "Error Message" in data:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return None

        if period == '1d':
            timeseries = data.get("Time Series (5min)", {})
        else:
            timeseries = data.get("Time Series (Daily)", {})

        if not timeseries:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥.")
            return None

        df = pd.DataFrame.from_dict(timeseries, orient='index', dtype=float)
        df.index = pd.to_datetime(df.index)
        df = df.sort_index()
        return df

    except Exception as e:
        st.error(f"üö® –û—à–∏–±–∫–∞: {e}")
        return None


data = get_stock_data(period=period)

if data is not None:
    st.write("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    st.write(data.head(10))  # –í—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö

    # üîπ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω (Open, High, Low, Close)
    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω AAPL")

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(data.index, data['1. open'], label="Open", linestyle="--")
    ax.plot(data.index, data['2. high'], label="High", linestyle="-")
    ax.plot(data.index, data['3. low'], label="Low", linestyle="-")
    ax.plot(data.index, data['4. close'], label="Close", linestyle="-", linewidth=2)

    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–¶–µ–Ω–∞ ($)")
    ax.legend()
    ax.grid(True)

    st.pyplot(fig)

    # üîπ –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä—ë–º–∞ —Ç–æ—Ä–≥–æ–≤
    st.subheader("üìä –û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ (Volume)")

    fig, ax = plt.subplots(figsize=(12, 5))
    ax.bar(data.index, data['5. volume'], color='skyblue', label="–û–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤")

    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–û–±—ä—ë–º")
    ax.legend()
    ax.grid(True)

    st.pyplot(fig)

    csv_data = data.to_csv(index=True)
    st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å CSV', data=csv_data, file_name='apple_stock.csv', mime='text/csv')

else:
    st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


st.title('üí∞ –ê–Ω–∞–ª–∏–∑ —á–∞–µ–≤—ã—Ö (Tips)')

def load_data():
    uploaded_file = st.sidebar.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å —á–∞–µ–≤—ã–º–∏', type=['csv'])
    if uploaded_file:
        return pd.read_csv(uploaded_file)
    return None

tips_df = load_data()

if tips_df is not None:
    st.write('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:')
    st.dataframe(tips_df.head(10))

    st.subheader('1Ô∏è‚É£ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–∞–µ–≤—ã—Ö –æ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞')
    fig, ax = plt.subplots()
    sns.scatterplot(x=tips_df['total_bill'], y=tips_df['tip'], hue=tips_df['smoker'], ax=ax)
    st.pyplot(fig)

    st.subheader('2Ô∏è‚É£ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö')
    fig, ax = plt.subplots()
    sns.histplot(tips_df['tip'], bins=20, kde=True, ax=ax)
    st.pyplot(fig)

    st.subheader('3Ô∏è‚É£ –ß–∞–µ–≤—ã–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
    fig, ax = plt.subplots()
    sns.boxplot(x=tips_df['day'], y=tips_df['tip'], hue=tips_df['sex'], ax=ax)
    st.pyplot(fig)

    st.subheader("üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")

    numeric_tips = tips_df.select_dtypes(include=['number'])
    categorical_columns = ['sex', 'smoker', 'day', 'time']
    tips_encoded = pd.get_dummies(tips_df, columns=categorical_columns, drop_first=True)
    final_tips = pd.concat([numeric_tips, tips_encoded], axis=1)

    fig, ax = plt.subplots(figsize=(8, 5))
    sns.heatmap(final_tips.corr(), annot=True, cmap="coolwarm", ax=ax)
    st.pyplot(fig)

    st.subheader('5Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–µ–≤—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
    avg_tips = tips_df.groupby('day')['tip'].mean().reset_index()
    fig, ax = plt.subplots()
    sns.barplot(x='day', y='tip', data=avg_tips, ax=ax)
    st.pyplot(fig)

    img_buf = BytesIO()
    fig.savefig(img_buf, format='png')
    st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫', data=img_buf.getvalue(), file_name='tips_analysis.png', mime='image/png')